task 1: In the driver file (main.cpp), perform the following sub-tasks.
1. Create two objects of this class, one with no constructor argument and one with the argument 5.
2. Take five input values from the user and store them in the array inside the second object using the set method.
3. For the second object, print all the values you just stored.
Note that, you cannot assign anything in the first object since the array inside it has size 0. Neither can you change 
the size of this array to some other size.
// dynarr.h
#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED

// Class declaration for dynamic array
class dynArr {
private:
    int *data;  // Pointer to dynamically allocated array
    int size;   // Size of the array

public:
    // Constructors and Destructor
    dynArr();         // Default constructor
    dynArr(int s);    // Parameterized constructor
    ~dynArr();        // Destructor

    // Member functions
    void setValue(int index, int value);  // Set value at a specific index
    int getValue(int index);              // Get value at a specific index
};

#endif // DYNARR_H_INCLUDED

// dynarr.cpp
#include "dynarr.h"
#include <iostream>

using namespace std;

// Default constructor
dynArr::dynArr() {
    data = nullptr;  // Initialize pointer to null
    size = 0;        // Initialize size to zero
}

// Parameterized constructor
dynArr::dynArr(int s) {
    data = new int[s];  // Dynamically allocate memory for the array //pointer_variable = new data_type[size];//pointer_variable: The pointer variable that will store the address of the dynamically allocated memory.
//data_type: The data type of the elements in the array.
    size = s;           // Set the size of the array
}

// Destructor
dynArr::~dynArr() {
    delete[] data;  // Deallocate the dynamically allocated memory
}

// Get value at a specific index
int dynArr::getValue(int index) {
    return data[index];
}

// Set value at a specific index
void dynArr::setValue(int index, int value) {
    data[index] = value;
}
//main.cpp
#include "dynarr.h"
#include <iostream>

using namespace std;

int main() {
    // 1. Create two objects of the dynArr class
    dynArr obj1;        // Object with default constructor (size 0)
    dynArr obj2(5);      // Object with parameterized constructor (size 5)

    // 2. Take five input values from the user and store them in the array inside the second object
    cout << "Enter five values for the array in the second object:\n";
    for (int i = 0; i < 5; i++) {
        int value;
        cout << "Enter value " << i + 1 << ": ";
        cin >> value;
        obj2.setValue(i, value);
    }

    // 3. Print all the values stored in the array inside the second object
    cout << "Values stored in the array of the second object:\n";
    for (int i = 0; i < 5; i++) {
        cout << "Value " << i + 1 << ": " << obj2.getValue(i) << endl;
    }

    return 0;
}

task 2: Modify the header and the source files. Add a member function void allocate(int s) which allows
you to change the size of the array. Make sure that memory is not leaked
// dynarr.h
#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED

class dynArr {
private:
    int *data;
    int size;

public:
    dynArr();
    dynArr(int);
    ~dynArr();
    void setValue(int, int);
    int getValue(int);
    void allocate(int);  // New member function to change the size of the array
};

#endif // DYNARR_H_INCLUDED
// dynarr.cpp
#include "dynarr.h"
#include <iostream>

using namespace std;

dynArr::dynArr() {
    //data = nullptr;
    size = 0;
}

dynArr::dynArr(int s) : size(s) {
    data = new int[size];
}

dynArr::~dynArr() {
    delete[] data;
}

void dynArr::setValue(int index, int value) {
    if (index >= 0 && index < size) {
        data[index] = value;
    }
}

int dynArr::getValue(int index) {
    if (index >= 0 && index < size) {
        return data[index];
    }
    return -1; // or handle the out-of-bounds case accordingly
}

void dynArr::allocate(int s) {
    // Deallocate existing memory
    delete[] data;

    // Allocate new memory with the specified size
    size = s;
    data = new int[size];
}

#include "dynarr.h"
#include <iostream>

using namespace std;

int main() {
    // Create an object with no constructor argument (size 0)
    dynArr obj1;

    // Create an object with the argument 5
    dynArr obj2(5);

    // Set values in the array of the second object
    cout << "Enter five values for the array in the second object:\n";
    for (int i = 0; i < 5; i++) {
        int value;
        cout << "Enter value " << i + 1 << ": ";
        cin >> value;
        obj2.setValue(i, value);
    }

    // Display values in the array of the second object
    cout << "Values stored in the array of the second object:\n";
    for (int i = 0; i < 5; i++) {
        cout << "Value " << i + 1 << ": " << obj2.getValue(i) << endl;
    }

    // Change the size of the array in the second object
    int newSize;
    cout << "Enter the new size for the array in the second object: ";
    cin >> newSize;
    obj2.allocate(newSize);

    // Take input for the new array in the second object
    cout << "Enter values for the new array in the second object:\n";
    for (int i = 0; i < newSize; i++) {
        int value;
        cout << "Enter value " << i + 1 << ": ";
        cin >> value;
        obj2.setValue(i, value);
    }

    // Display the updated array in the second object
    cout << "Updated values in the array of the second object:\n";
    for (int i = 0; i < newSize; i++) {
        cout << "Value " << i + 1 << ": " << obj2.getValue(i) << endl;
    }

    return 0;
}

task 3 - Modify the header file and the source files again, so that it works for two dimensional array where all the 
rows are the same size. The user will specify the number of rows and columns as well as the content of the array, 
which you will take as input from user in the main function
// dynarr.h
#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED

class dynArr {
private:
    int **data;  // Pointer to a pointer for a two-dimensional array
    int rows;
    int cols;

public:
    dynArr();
    dynArr(int r, int c);
    ~dynArr();
    void setValue(int row, int col, int value);
    int getValue(int row, int col);
    void allocate(int r, int c);
};

#endif // DYNARR_H_INCLUDED
// dynarr.cpp
#include "dynarr.h"
#include <iostream>

using namespace std;

dynArr::dynArr() : data(nullptr),rows(0), cols(0) {}

dynArr::dynArr(int r, int c) : rows(r), cols(c) {
    data = new int*[rows];  // Allocate an array of row pointers

    for (int i = 0; i < rows; ++i) {
        data[i] = new int[cols];  // Allocate each row separately
    }
}

dynArr::~dynArr() {
    // Deallocate memory for each row
    for (int i = 0; i < rows; ++i) {
        delete[] data[i];
    }

    // Deallocate memory for the array of row pointers
    delete[] data;
}

void dynArr::setValue(int row, int col, int value) {
    if (row >= 0 && row < rows && col >= 0 && col < cols) {
        data[row][col] = value;
    }
}

int dynArr::getValue(int row, int col) {
    if (row >= 0 && row < rows && col >= 0 && col < cols) {
        return data[row][col];
    }
    return -1; // or handle the out-of-bounds case accordingly
}

void dynArr::allocate(int r, int c) {
    // Deallocate existing memory
    for (int i = 0; i < rows; ++i) {
        delete[] data[i];
    }
    delete[] data;

    // Allocate new memory for the specified number of rows and columns
    rows = r;
    cols = c;

    data = new int*[rows];  // Allocate an array of row pointers

    for (int i = 0; i < rows; ++i) {
        data[i] = new int[cols];  // Allocate each row separately
    }
}
// main.cpp
#include <iostream>
#include "dynarr.h"

using namespace std;

int main() {
    // Task 1: Create Object
    int rows, cols;

    cout << "Enter the number of rows: ";
    cin >> rows;

    cout << "Enter the number of columns: ";
    cin >> cols;

    dynArr obj(rows, cols);

    // Task 2: Take User Input
    int input;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << "Enter value at row " << (i + 1) << ", column " << (j + 1) << ": ";
            cin >> input;
            obj.setValue(i, j, input);
        }
    }

    // Task 3: Print Stored Values
    cout << "Values stored in the object: \n";
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << obj.getValue(i, j) << " ";
        }
        cout << endl;
    }

    return 0;
}





//Extra : do it for 2d array of rows of different length
// dynarr.h
#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED

class dynArr {
private:
    int **data;  // Pointer to an array of pointers for a two-dimensional array with varying row sizes
    int *rowSizes;  // Array to store the size of each row
    int numRows;    // Number of rows

public:
    dynArr();
    dynArr(int r, int* sizes);
    ~dynArr();
    void setValue(int row, int col, int value);
    int getValue(int row, int col);
    void allocate(int r, int* sizes);
};

#endif // DYNARR_H_INCLUDED
// dynarr.cpp
#include "dynarr.h"
#include <iostream>

using namespace std;

dynArr::dynArr() : data(nullptr), rowSizes(nullptr), numRows(0) {}

dynArr::dynArr(int r, int* sizes) : numRows(r) {
    data = new int*[numRows];   // Allocate an array of row pointers
    rowSizes = new int[numRows]; // Allocate an array to store row sizes

    for (int i = 0; i < numRows; ++i) {
        rowSizes[i] = sizes[i];  // Store the size of each row
        data[i] = new int[rowSizes[i]];  // Allocate each row separately
    }
}

dynArr::~dynArr() {
    // Deallocate memory for each row
    for (int i = 0; i < numRows; ++i) {
        delete[] data[i];
    }

    // Deallocate memory for the array of row pointers and row sizes
    delete[] data;
    delete[] rowSizes;
}

void dynArr::setValue(int row, int col, int value) {
    if (row >= 0 && row < numRows && col >= 0 && col < rowSizes[row]) {
        data[row][col] = value;
    }
}

int dynArr::getValue(int row, int col) {
    if (row >= 0 && row < numRows && col >= 0 && col < rowSizes[row]) {
        return data[row][col];
    }
    return -1; // or handle the out-of-bounds case accordingly
}

void dynArr::allocate(int r, int* sizes) {
    // Deallocate existing memory
    for (int i = 0; i < numRows; ++i) {
        delete[] data[i];
    }
    delete[] data;
    delete[] rowSizes;

    // Allocate new memory for the specified number of rows and sizes
    numRows = r;

    data = new int*[numRows];   // Allocate an array of row pointers
    rowSizes = new int[numRows]; // Allocate an array to store row sizes

    for (int i = 0; i < numRows; ++i) {
        rowSizes[i] = sizes[i];  // Store the size of each row
        data[i] = new int[rowSizes[i]];  // Allocate each row separately
    }
}
// main.cpp
#include <iostream>
#include "dynarr.h"

using namespace std;

int main() {
    // Task 1: Create Object
    int numRows;

    cout << "Enter the number of rows: ";
    cin >> numRows;

    int* rowSizes = new int[numRows];

    cout << "Enter the size for each row:" << endl;
    for (int i = 0; i < numRows; ++i) {
        cout << "Size of row " << (i + 1) << ": ";
        cin >> rowSizes[i];
    }

    dynArr obj(numRows, rowSizes);

    // Task 2: Take User Input
    int input;
    for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < rowSizes[i]; ++j) {
            cout << "Enter value at row " << (i + 1) << ", column " << (j + 1) << ": ";
            cin >> input;
            obj.setValue(i, j, input);
        }
    }

    // Task 3: Print Stored Values
    cout << "Values stored in the object: \n";
    for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < rowSizes[i]; ++j) {
            cout << obj.getValue(i, j) << " ";
        }
        cout << endl;
    }

    // Cleanup
    delete[] rowSizes;

    return 0;
}


//Task 1: Recall the class we used in the previous lab to allocate memory dynamically. Modify the header file 
//and the source file given below so that they now work as template class (the array elements in the 
//dynamically allocated memory can be any type as the user defines).
 Include guard to prevent multiple inclusion of the header file
#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED
// Declaration of the template class dynArr
template <class anything>
//template <class or typename T>
//class or typename declares a type parameter 
class dynArr
{
//Private data members: pointer to dynamically allocated memory and size of the array
private:
    anything *data;
    int size;
public:
    dynArr(int);
    ~dynArr();
    void setValue(int, anything);
    anything getValue(int);

};
#endif // DYNARR_H_INCLUDED
//Here, a template class dynArr is defined. It has private data members data (a pointer to anything) and size (an integer). The class also declares a constructor, destructor, and member functions to set and get values.




#include "dynarr.h"
#include <iostream>
using namespace std;
template <class anything>
//ClassName<T>::ConstructorName(Parameters)
dynArr<anything>::dynArr(int s)
{
    data = new anything[s];   //pointerVariable = new DataType[size];
    size = s;
}
//This is the constructor definition for the dynArr class. It dynamically allocates an array of type anything with size s and sets the size accordingly.
template <class anything>
dynArr<anything>::~dynArr()//The destructor definition. It deallocates the dynamically allocated memory when the object goes out of scope. i.e when its block or function in which it is declared ends
{
    delete [] data;
}
template <class anything>
//ReturnType ClassName<T>::FunctionName(ParameterType parameter)
anything dynArr<anything>::getValue(int index)//Definition of the member function getValue, which retrieves the value at the specified index in the array.
{
    return data[index];
}
template <class anything>
void dynArr<anything>::setValue(int index, anything value)//Definition of the member function setValue, which sets the value at the specified index in the array.
{
    data[index] = value;
}




#include <iostream>
#include "dynarr.h"
#include "dynarr.cpp"
using namespace std;
int main()
{

    dynArr<int> da1(5);//an instance da1 of the template class dynArr is created with the template parameter int with size 5
    cout<<"enter index and value"<<endl;
    int i, v;
    cin>>i;
    cin>> v;
    da1.setValue(i,v);
    cout<<da1.getValue(0)<<endl;//this will print garbage value since we have not yet set value at index 0
    dynArr<double> da2(5);//an instance da1 of the template class dynArr is created with the template parameter double with size 5
    da2.setValue(0,4.67);
    cout<<da2.getValue(0)<<endl;//4.67
    cout<<da1.getValue(i)<<endl;//value entered by user at the index i but if index is chosen more than 5 garbage value will be printed
    return 0;
}
//complex number
//complex.h
#ifndef COMPLEX_H_INCLUDED
#define COMPLEX_H_INCLUDED
class Complex
{
public:
    Complex();
    Complex(double, double);
    Complex operator+(Complex);
    void Print();
private:
    double Real, Imaginary;
};
#endif // COMPLEX_H_INCLUDED


//complex.cpp
#include "complex.h"
#include <iostream>
using namespace std;
Complex::Complex()
{
    Real = 0;
    Imaginary = 0;
}
Complex::Complex(double r, double i)
{
    Real = r;
    Imaginary = i;
}
Complex Complex::operator+(Complex a)
{
    Complex t;
    t.Real = Real + a.Real;
    t.Imaginary = Imaginary + a.Imaginary;
    return t;
}
void Complex::Print()
{
    cout << Real << endl;
    cout << Imaginary << endl;
}
// main.cpp

#include "complex.h"
#include <iostream>

int main() {
    // Code using Complex class
    Complex complex1(3.0, 4.0);
    Complex complex2(1.5, 2.5);
    Complex result = complex1 + complex2;
    result.Print();

    return 0;
}






//Task 2: Recall the complex number class we discussed in our lectures. Modify the class and overload the *
//(multiplication) and the != (not equal) operators for the class given below
// complex.h

#ifndef COMPLEX_H_INCLUDED
#define COMPLEX_H_INCLUDED

class Complex {
public:
    Complex();
    Complex(double, double);
    Complex operator+(const Complex&) const;  // Overloaded +
    Complex operator*(const Complex&) const;  // Overloaded *
    bool operator!=(const Complex&) const;    // Overloaded !=
    void Print() const;

private:
    double Real, Imaginary;
};

#endif // COMPLEX_H_INCLUDED


// complex.cpp

#include "complex.h"
#include <iostream>

Complex::Complex() {
    Real = 0;
    Imaginary = 0;
}

Complex::Complex(double r, double i) {
    Real = r;
    Imaginary = i;
}

Complex Complex::operator+(const Complex& a) const {
    Complex t;
    t.Real = Real + a.Real;
    t.Imaginary = Imaginary + a.Imaginary;
    return t;
}

Complex Complex::operator*(const Complex& a) const {
    Complex t;
    t.Real = (Real * a.Real) - (Imaginary * a.Imaginary);
    t.Imaginary = (Real * a.Imaginary) + (Imaginary * a.Real);
    return t;
}

bool Complex::operator!=(const Complex& a) const {
    return (Real != a.Real) || (Imaginary != a.Imaginary);
}

void Complex::Print() const {
    std::cout << "Real: " << Real << std::endl;
    std::cout << "Imaginary: " << Imaginary << std::endl;
}


// main.cpp

#include "complex.h"
#include <iostream>

int main() {
    // Create two Complex objects
    Complex complex1(3.0, 4.0);
    Complex complex2(1.5, 2.5);

    // Use the overloaded + operator to add the two complex numbers
    Complex resultAddition = complex1 + complex2;

    // Use the overloaded * operator to multiply the two complex numbers
    Complex resultMultiplication = complex1 * complex2;

    // Print the results
    std::cout << "Result of addition:" << std::endl;
    resultAddition.Print();

    std::cout << "\nResult of multiplication:" << std::endl;
    resultMultiplication.Print();

    // Use the overloaded != operator to check inequality
    if (complex1 != complex2) {
        std::cout << "\nComplex numbers are not equal." << std::endl;
    } else {
        std::cout << "\nComplex numbers are equal." << std::endl;
    }

    return 0;
}

//Complex Complex::operator/(Complex a)
{
    Complex t;
    double denominator = a.Real * a.Real + a.Imaginary * a.Imaginary;
    t.Real = (Real * a.Real + Imaginary * a.Imaginary) / denominator;
    t.Imaginary = (Imaginary * a.Real - Real * a.Imaginary) / denominator;
    return t;
}



/*
 Task:
 Generate the driver file (main.cpp) where you perform the following tasks. Note that you cannot make any change to
 the header file or the source file.

 Operations to be performed:
    • Create a list of integers.
    • Insert four items.
    • Print the list.
    • Print the length of the list.
    • Insert one item.
    • Print the list.
    • Retrieve 4 and print whether found or not.
    • Retrieve 5 and print whether found or not.
    • Retrieve 9 and print whether found or not.
    • Retrieve 10 and print whether found or not.
    • Print if the list is full or not.
    • Delete 5.
    • Print if the list is full or not.
    • Delete 1.
    • Print the list.
    • Delete 6.
    • Print the list.

    • Write a class "studentInfo" that represents a student record. It must have variables to store the student ID,
    student’s name and student’s CGPA. It also must have a function to print all the values. You will also need to
    overload a few operators.
        • Create a list of objects of class "studentInfo".
        • Insert 5 student record.
        • Delete the record with ID15467.
        • Retrieve the record with ID 13569 and print whether found or not along with the entire record.
        • Print the list.

 Note:
 Helper functions are created to avoid code duplication. You can use them, or you can write your own.
*/
#ifndef STUDENTINFO_H_INCLUDED
#define STUDENTINFO_H_INCLUDED

#include <iostream>
#include <string>

class studentInfo {
public:
    // Constructor
    studentInfo(int id = 0, std::string name = "", double cgpa = 0.0);

    // Function to print student information
    void printInfo() const;

    // Getter for student ID
    int getID() const;

    // Overloaded equality operator
    bool operator==(const studentInfo& other) const;

private:
    int studentID;
    std::string studentName;
    double studentCGPA;
};

#endif // STUDENTINFO_H_INCLUDED
#include "studentInfo.h"

// Constructor definition
studentInfo::studentInfo(int id, std::string name, double cgpa) :
    studentID(id), studentName(name), studentCGPA(cgpa) {}

// Function to print student information
void studentInfo::printInfo() const {
    std::cout << "Student ID: " << studentID << std::endl;
    std::cout << "Student Name: " << studentName << std::endl;
    std::cout << "Student CGPA: " << studentCGPA << std::endl;
}

// Getter for student ID
int studentInfo::getID() const {
    return studentID;
}

// Overloaded equality operator
bool studentInfo::operator==(const studentInfo& other) const {
    return (studentID == other.studentID);
}
#include <iostream>
#include "studentInfo.h"
#include "unsortedtype.h"
#include "unsortedtype.cpp" // Including the implementation file for template class

int main() {
    // Create studentInfo objects
    studentInfo student1(12345, "John Doe", 3.5);
    studentInfo student2(15467, "Jane Smith", 3.7);
    studentInfo student3(13569, "Alice Johnson", 3.9);
    studentInfo student4(17684, "Bob Anderson", 3.2);
    studentInfo student5(19876, "Emily Brown", 3.8);

    // Create a list of studentInfo objects
    UnsortedType<studentInfo> studentList;

    // Insert student records into the list
    studentList.InsertItem(student1);
    studentList.InsertItem(student2);
    studentList.InsertItem(student3);
    studentList.InsertItem(student4);
    studentList.InsertItem(student5);

    // Delete the record with ID 15467
    studentList.DeleteItem(studentInfo(15467));

    // Retrieve and print whether record with ID 13569 is found or not
    studentInfo searchItem;
    bool found = false;
    studentList.RetrieveItem(studentInfo(13569), found);
    std::cout << "Record with ID 13569 is ";
    if (found) {
        std::cout << "found:" << std::endl;
        searchItem.printInfo();
    } else {
        std::cout << "not found." << std::endl;
    }

    // Print the list of student records
    std::cout << "\nList of student records:" << std::endl;
    int length = studentList.LengthIs();
    studentInfo studentRecord;
    for (int i = 0; i < length; ++i) {
        studentList.GetNextItem(studentRecord);
        studentRecord.printInfo();
        std::cout << std::endl;
    }

    return 0;
}


//sorted list array implementation
//sortedtype.h
#ifndef SORTEDTYPE_H_INCLUDED
#define SORTEDTYPE_H_INCLUDED
const int MAX_ITEMS = 5;
template <class ItemType>
class SortedType
{
public :
    SortedType();
    void MakeEmpty();
    bool IsFull();
    int LengthIs();
    void InsertItem(ItemType);
    void DeleteItem(ItemType);
    void RetrieveItem(ItemType&,
                      bool&);
    void ResetList();
    void GetNextItem(ItemType&);
private:
    int length;
    ItemType info[MAX_ITEMS];
    int currentPos;
};
#endif // SORTEDTYPE_H_INCLUDED
sortedtype.cpp
#include "sortedtype.h"
template <class ItemType>
SortedType<ItemType>::SortedType()
{
    length = 0;
    currentPos = - 1;
}
template <class ItemType>
void SortedType<ItemType>::MakeEmpty()
{
    length = 0;
}
template <class ItemType>
bool SortedType<ItemType>::IsFull()
{
    return (length == MAX_ITEMS);
}
template <class ItemType>
int SortedType<ItemType>::LengthIs()
{
    return length;
}
template <class ItemType>
void SortedType<ItemType>::ResetList()
{
    currentPos = - 1;
}
template <class ItemType>
void
SortedType<ItemType>::GetNextItem(ItemType&
                                  item)
{
    currentPos++;
    item = info [currentPos];
}
template <class ItemType>
void SortedType<ItemType>::InsertItem(ItemType
                                      item)
{
    int location = 0;
    bool moreToSearch = (location < length);
    while (moreToSearch)
    {
        if(item > info[location])
        {
            location++;
            moreToSearch = (location < length);
        }
        else if(item < info[location])
            moreToSearch = false;
    }
    for (int index = length; index > location;
            index--)
        info[index] = info[index - 1];
    info[location] = item;
    length++;
}
template <class ItemType>
void SortedType<ItemType>::DeleteItem(ItemType
                                      item)
{
    int location = 0;
    while (item != info[location])
        location++;
    for (int index = location + 1; index < length;
            index++)
        info[index - 1] = info[index];
    length--;
}
template <class ItemType>
void SortedType<ItemType>::RetrieveItem(ItemType&
                                        item, bool& found)
{
    int midPoint, first = 0, last = length - 1;
    bool moreToSearch = (first <= last);
    found = false;
    while (moreToSearch && !found)
    {
        midPoint = (first + last) / 2;
        if(item < info[midPoint])
        {
            last = midPoint - 1;
            moreToSearch = (first <= last);
        }
        else if(item > info[midPoint])
        {
            first = midPoint + 1;
            moreToSearch = (first <= last);
        }
        else
        {
            found = true;
            item = info[midPoint];
        }
    }
}
//timeStamp.h
#ifndef TIMESTAMP_H_INCLUDED
#define TIMESTAMP_H_INCLUDED

#include <iostream>
#include <iomanip>

class timeStamp {
private:
    int seconds;
    int minutes;
    int hours;
public:
    timeStamp(int s = 0, int m = 0, int h = 0);
    void printTime() const;
    bool operator==(const timeStamp& other) const;
    bool operator<(const timeStamp& other) const;
};

#endif // TIMESTAMP_H_INCLUDED

//timeStamp.cpp
#include "timeStamp.h"

timeStamp::timeStamp(int s, int m, int h) : seconds(s), minutes(m), hours(h) {}

void timeStamp::printTime() const {
    std::cout << std::setw(2) << std::setfill('0') << seconds << ":"
              << std::setw(2) << std::setfill('0') << minutes << ":"
              << std::setw(2) << std::setfill('0') << hours << std::endl;
}

bool timeStamp::operator==(const timeStamp& other) const {
    return (seconds == other.seconds && minutes == other.minutes && hours == other.hours);
}

bool timeStamp::operator<(const timeStamp& other) const {
    if (seconds < other.seconds)
        return true;
    else if (seconds == other.seconds && minutes < other.minutes)
        return true;
    else if (seconds == other.seconds && minutes == other.minutes && hours < other.hours)
        return true;
    else
        return false;
}

//main.cpp
#include <iostream>
#include "timeStamp.h"
#include "sortedtype.h"
#include "sortedtype.cpp"
int main() {
    SortedType<timeStamp> timeList;

    // Inserting time values
    timeList.InsertItem(timeStamp(15, 34, 23)); // 15:34:23
    timeList.InsertItem(timeStamp(13, 13, 02));  // 13:13:02
    timeList.InsertItem(timeStamp(43, 45, 12)); // 43:45:12
    timeList.InsertItem(timeStamp(25, 36, 17)); // 25:36:17
    timeList.InsertItem(timeStamp(52, 02, 20));  // 52:02:20

    // Deleting the timestamp 25 36 17
    timeList.DeleteItem(timeStamp(25, 36, 17));

    // Printing the list
    int length = timeList.LengthIs();
    timeStamp timeItem;
    for (int i = 0; i < length; ++i) {
        timeList.GetNextItem(timeItem);
        timeItem.printTime();
    }

    return 0;
}


//unsorted list linked list implementation

unsortedtype.h
#ifndef UNSORTEDTYPE_H_INCLUDED
#define UNSORTEDTYPE_H_INCLUDED
template <class ItemType>
class UnsortedType
{
    struct NodeType
    {
        ItemType info;
        NodeType* next;
    };
public:
    UnsortedType();
    ~UnsortedType();
    bool IsFull();
    int LengthIs();
    void MakeEmpty();
    void RetrieveItem(ItemType&,
                      bool&);
    void InsertItem(ItemType);
    void DeleteItem(ItemType);
    void ResetList();
    void GetNextItem(ItemType&);
private:
    NodeType* listData;
    int length;
    NodeType* currentPos;
};
#endif // UNSORTEDTYPE_H_INCLUDED

unsortedtype.cpp
#include "unsortedtype.h"
#include <iostream>
using namespace std;
template <class ItemType>
UnsortedType<ItemType>::UnsortedType()
{
    length = 0;
    listData = NULL;
    currentPos = NULL;
}
template <class ItemType>
int UnsortedType<ItemType>::LengthIs()
{
    return length;
}
template<class ItemType>
bool UnsortedType<ItemType>::IsFull()
{
    NodeType* location;
    try
    {
        location = new NodeType;
        delete location;
        return false;
    }
    catch(bad_alloc& exception)
    {
        return true;
    }
}
template <class ItemType>
void UnsortedType<ItemType>::InsertItem(ItemType
                                        item)
{
    NodeType* location;
    location = new NodeType;
    location->info = item;
    location->next = listData;
    listData = location;
    length++;
}
template <class ItemType>
void UnsortedType<ItemType>::DeleteItem(ItemType
                                        item)
{
    NodeType* location = listData;
    NodeType* tempLocation;
    if (item == listData->info)
    {
        tempLocation = location;
        listData = listData->next;
    }
    else
    {
        while (!(item==(location->next)->info))
            location = location->next;
        tempLocation = location->next;
        location->next = (location->next)->next;
    }
    delete tempLocation;
    length--;
}
template <class ItemType>
void UnsortedType<ItemType>::RetrieveItem(ItemType&
        item, bool& found)
{
    NodeType* location = listData;
    bool moreToSearch = (location != NULL);
    found = false;
    while (moreToSearch && !found)
    {
        if (item == location->info)
            found = true;
        else
        {
            location = location->next;
            moreToSearch = (location != NULL);
        }
    }
}
template <class ItemType>
void UnsortedType<ItemType>::MakeEmpty()
{
    NodeType* tempPtr;
    while (listData != NULL)
    {
        tempPtr = listData;
        listData = listData->next;
        delete tempPtr;
    }
    length = 0;
}
template <class ItemType>
UnsortedType<ItemType>::~UnsortedType()
{
    MakeEmpty();
}
template <class ItemType>
void UnsortedType<ItemType>::ResetList()
{
    currentPos = NULL;
}
template <class ItemType>
void UnsortedType<ItemType>::GetNextItem(ItemType&
        item)
{
    if (currentPos == NULL)
        currentPos = listData;
    else
        currentPos = currentPos->next;
    item = currentPos->info;
}
/*
 Task:
 Generate the driver file (main.cpp) where you perform the following tasks. Note that you cannot make any change to the
 header file or the source file.

 You are given two sequences of integers arranged in ascending order. Your task is to combine the sequences into one
 ascending sequence. In order to get full marks, you have to make sure that the time complexity of combining two
 sequences is `O(N)`. You can safely assume that no integer will be repeated.Input starts with a positive integer
 "m" which specifies the number of elements in the first sequence. Next "m" values are the elements in the first
 sequence. The next positive integer "n" specifies the number of elements in the second sequence. Next "n" values are
 the elements in the second sequence.The output is the combined sequence.
*/

#include <iostream>
#include "unsortedtype.h"
#include "unsortedtype.cpp"
using namespace std;

int main()
{

    UnsortedType<int> list1, list2, merged;      // Create three lists

    int n, v;                                    // Taking inputs for list1
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> v;
        list1.InsertItem(v);
    }

    cin >> n;                                    // Taking inputs for list2
    for (int i = 0; i < n; i++)
    {
        cin >> v;
        list2.InsertItem(v);
    }

    int value1, value2;
    int index1 = list1.LengthIs();
    int index2 = list2.LengthIs();
    list1.GetNextItem(value1);
    list2.GetNextItem(value2);

    while (index1 > 0 && index2 > 0)             // Merging the lists
    {
        if (value1 > value2)
        {
            merged.InsertItem(value1);
            index1--;
            if (index1 > 0)
                list1.GetNextItem(value1);
        }
        else if (value2 > value1)
        {
            merged.InsertItem(value2);
            index2--;
            if (index2 > 0)
                list2.GetNextItem(value2);
        }
        else
        {
            merged.InsertItem(value1);
            merged.InsertItem(value2);
            index1--;
            index2--;
            if (index1 > 0)
                list1.GetNextItem(value1);
            if (index2 > 0)
                list2.GetNextItem(value2);
        }
    }

    while (index1 > 0)                           // Adding the remaining elements of list1
    {
        merged.InsertItem(value1);
        index1--;
        if (index1 > 0)
            list1.GetNextItem(value1);
    }

    while (index2 > 0)                           // Adding the remaining elements of list2
    {
        merged.InsertItem(value2);
        index2--;
        if (index2 > 0)
            list2.GetNextItem(value2);
    }

    int value_merged;
    int index_merged = merged.LengthIs() - 1;

    while (index_merged >= 0)                    // Printing the merged list
    {
        merged.GetNextItem(value_merged);
        cout << value_merged << ' ';
        index_merged--;
    }
    cout << endl;

    return 0;
}


//sorted list linked list implementation

//sortedtype.h
#ifndef SORTEDTYPE_H_INCLUDED
#define SORTEDTYPE_H_INCLUDED
template <class ItemType>
class SortedType
{
    struct NodeType
    {
        ItemType info;
        NodeType* next;
    };
public:
    SortedType();
    ~SortedType();
    bool IsFull();
    int LengthIs();
    void MakeEmpty();
    void RetrieveItem(ItemType&,
                      bool&);
    void InsertItem(ItemType);
    void DeleteItem(ItemType);
    void ResetList();
    void GetNextItem(ItemType&);
private:
    NodeType* listData;
    int length;
    NodeType* currentPos;
};
#endif // SORTEDTYPE_H_INCLUDED
//sortedtype.cpp
#include "sortedtype.h"
#include <iostream>
using namespace std;
template <class ItemType>
SortedType<ItemType>::SortedType()
{
    length = 0;
    listData = NULL;
    currentPos = NULL;
}
template <class ItemType>
int SortedType<ItemType>::LengthIs()
{
    return length;
}
template<class ItemType>
bool SortedType<ItemType>::IsFull()
{
    NodeType* location;
    try
    {
        location = new NodeType;
        delete location;
        return false;
    }
    catch(bad_alloc& exception)
    {
        return true;
    }
}
template <class ItemType>
void SortedType<ItemType>::InsertItem(ItemType item)
{
    NodeType* newNode;
    NodeType* predLoc;
    NodeType* location;
    bool moreToSearch;
    location = listData;
    predLoc = NULL;
    moreToSearch = (location != NULL);
    while (moreToSearch)
    {
        if (location->info < item)
        {
            predLoc = location;
            location = location->next;
            moreToSearch = (location != NULL);
        }
        else moreToSearch = false;
    }
    newNode = new NodeType;
    newNode->info = item;
    if (predLoc == NULL)
    {
        newNode->next = listData;
        listData = newNode;
    }
    else
    {
        newNode->next = location;
        predLoc->next = newNode;
    }
    length++;
}
template <class ItemType>
void SortedType<ItemType>::DeleteItem(ItemType item)
{
    NodeType* location = listData;
    NodeType* tempLocation;
    if (item == listData->info)
    {
        tempLocation = location;
        listData = listData->next;
    }
    else
    {
        while (!(item==(location->next)->info))
            location = location->next;
        tempLocation = location->next;
        location->next = (location->next)->next;
    }
    delete tempLocation;
    length--;
}
template <class ItemType>
void
SortedType<ItemType>::RetrieveItem(ItemType
                                   & item, bool& found)
{
    NodeType* location = listData;
    bool moreToSearch = (location != NULL);
    found = false;
    while (moreToSearch && !found)
    {
        if (item == location->info)
            found = true;
        else if (item > location->info)
        {
            location = location->next;
            moreToSearch = (location !=
                            NULL);
        }
        else
            moreToSearch = false;
    }
}
template <class ItemType>
void SortedType<ItemType>::MakeEmpty()
{
    NodeType* tempPtr;
    while (listData != NULL)
    {
        tempPtr = listData;
        listData = listData->next;
        delete tempPtr;
    }
    length = 0;
}
template <class ItemType>
SortedType<ItemType>::~SortedType()
{
    MakeEmpty();
}
template <class ItemType>
void SortedType<ItemType>::ResetList()
{
    currentPos = NULL;
}
template <class ItemType>
void
SortedType<ItemType>::GetNextItem(ItemType
                                  & item)
{
    if (currentPos == NULL)
        currentPos = listData;
    else
        currentPos = currentPos->next;
    item = currentPos->info;
}

//timeStamp.h
#ifndef TIMESTAMP_H_INCLUDED
#define TIMESTAMP_H_INCLUDED

#include <iostream>
#include <iomanip>

class timeStamp {
private:
    int seconds;
    int minutes;
    int hours;
public:
    timeStamp(int s = 0, int m = 0, int h = 0);
    void printTime() const;
    bool operator==(const timeStamp& other) const;
    bool operator<(const timeStamp& other) const;
};

#endif // TIMESTAMP_H_INCLUDED

//timeStamp.cpp
#include "timeStamp.h"

timeStamp::timeStamp(int s, int m, int h) : seconds(s), minutes(m), hours(h) {}

void timeStamp::printTime() const {
    std::cout << std::setw(2) << std::setfill('0') << seconds << ":"
              << std::setw(2) << std::setfill('0') << minutes << ":"
              << std::setw(2) << std::setfill('0') << hours << std::endl;
}

bool timeStamp::operator==(const timeStamp& other) const {
    return (seconds == other.seconds && minutes == other.minutes && hours == other.hours);
}

bool timeStamp::operator<(const timeStamp& other) const {
    if (seconds < other.seconds)
        return true;
    else if (seconds == other.seconds && minutes < other.minutes)
        return true;
    else if (seconds == other.seconds && minutes == other.minutes && hours < other.hours)
        return true;
    else
        return false;
}

//main.cpp
#include <iostream>
#include "timeStamp.h"
#include "sortedtype.h"
#include "sortedtype.cpp"
int main() {
    SortedType<timeStamp> timeList;

    // Inserting time values
    timeList.InsertItem(timeStamp(15, 34, 23)); // 15:34:23
    timeList.InsertItem(timeStamp(13, 13, 02));  // 13:13:02
    timeList.InsertItem(timeStamp(43, 45, 12)); // 43:45:12
    timeList.InsertItem(timeStamp(25, 36, 17)); // 25:36:17
    timeList.InsertItem(timeStamp(52, 02, 20));  // 52:02:20

    // Deleting the timestamp 25 36 17
    timeList.DeleteItem(timeStamp(25, 36, 17));

    // Printing the list
    int length = timeList.LengthIs();
    timeStamp timeItem;
    for (int i = 0; i < length; ++i) {
        timeList.GetNextItem(timeItem);
        timeItem.printTime();
    }

    return 0;
}
